<?php

/**
 * @file
 * Integrates various PayPal payment services and IPN with Ubercart.
 *
 * You should turn on Instant Payment Notifications in your PayPal profile and
 * set the IPN URL to http://{yoursite.com}/uc_paypal/ipn. See
 * https://drupal.org/node/1311198 for further information.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\uc_order\Entity\Order;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function uc_paypal_help($route_name, RouteMatchInterface $route_match) {
  // @todo: write better help!
  // Provide information and instructions on the payment method add form.
  if ($route_name == 'entity.uc_payment_method.add_form') {
    if ($route_match->getRawParameter('plugin_id') == 'paypal_ec') {
      return '<p>' . t('PayPal Express Checkout settings help.') . '</p>';
    }
    elseif ($route_match->getRawParameter('plugin_id') == 'paypal_wps') {
      return '<p>' . t('PayPal Website Payments Standard settings help.') . '</p>';
    }
  }
  // Provide information and instructions on the payment method edit form.
  elseif ($route_name == 'entity.uc_payment_method.edit_form') {
    if ($route_match->getParameter('uc_payment_method')->getPlugin()->getPluginId() == 'paypal_ec') {
      return '<p>' . t('PayPal Express Checkout settings help.') . '</p>';
    }
    elseif ($route_match->getParameter('uc_payment_method')->getPlugin()->getPluginId() == 'paypal_wps') {
      return '<p>' . t('PayPal Website Payments Standard settings help.') . '</p>';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_form().
 */
function uc_paypal_form_uc_cart_checkout_form_alter(&$form, &$form_state, $form_id) {
  $paypal_config = \Drupal::config('uc_paypal.settings');
  if ($paypal_config->get('uc_payment_method_paypal_ec_checkout')) {
    $form['#submit'][] = 'uc_paypal_ec_checkout';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_review_form().
 */
function uc_paypal_form_uc_cart_checkout_review_form_alter(&$form, &$form_state, $form_id) {
  $session = \Drupal::service('session');
  if ($session->has('TOKEN')) {
    $form['#submit'][] = 'uc_paypal_ec_submit_form_submit';
  }
}

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_paypal_uc_payment_gateway() {
  if (!\Drupal::moduleHandler()->moduleExists('uc_credit')) {
    drupal_set_message(t('You must <a href=":modules">enable the Credit Card module</a> to use PayPal Website Payments Pro.', [':modules' => Url::fromRoute('system.modules_list', [], ['fragment' => 'edit-modules-ubercart-payment'])->toString()]), 'warning');
    return;
  }

  $gateways['paypal_wpp'] = array(
    'title' => t('PayPal Website Payments Pro'),
    'description' => t('Process credit card payments using Website Payments Pro.'),
    'settings' => 'uc_paypal_wpp_settings_form',
    'credit' => 'uc_paypal_wpp_charge',
    'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_PRIOR_AUTH_CAPTURE, UC_CREDIT_AUTH_CAPTURE),
  );

  return $gateways;
}

  // Payment method titles ...
  //
  // $title1 = '<img src="https://www.paypal.com/en_US/i/logo/PayPal_mark_37x23.gif" alt="PayPal" class="uc-credit-cctype" />'
  //       . ' ' . t('PayPal - pay without sharing your financial information.');
  /*
  $title2 = '<br /><span id="paypal-includes">' . t('Includes:');
  $cc_types = array(
    'visa' => t('Visa'),
    'mastercard' => t('MasterCard'),
    'discover' => t('Discover'),
    'amex' => t('American Express'),
    'echeck' => t('eCheck'),
  );
  foreach ($cc_types as $type => $label) {
    $title2 .= ' ' . theme('image', array(
      'uri' => drupal_get_path('module', 'uc_credit') . '/images/' . $type . '.gif',
      'alt' => $label,
      'attributes' => array('class' => array('uc-credit-cctype', 'uc-credit-cctype-' . $type)),
    ));
  }
  $title2 .= ' <img src="https://www.paypal.com/en_US/i/logo/PayPal_mark_37x23.gif" alt="PayPal" class="uc-credit-cctype" /></span>';
  */

/**
 * Redirects if a customer selects PayPal Express Checkout as a payment method.
 */
function uc_paypal_ec_checkout($form, FormStateInterface $form_state) {
  if ($form_state->getValue(['panes', 'payment', 'payment_method']) != 'paypal_ec') {
    return;
  }

  $paypal_config = \Drupal::config('uc_paypal.settings');

  $session = \Drupal::service('session');
  $order_id = intval($session->get('cart_order'));

  $order = Order::load($order_id);
  if (!$order || $order->getStateId() != 'in_checkout') {
    $session->remove('cart_order');
    // @todo: when this goes into a controller or form, use $this ...
    // $this->redirect('uc_cart.cart');
    return new RedirectResponse(Url::fromRoute('uc_cart.cart')->toString());
  }

  list($desc, $subtotal) = _uc_paypal_product_details($order->products);

  $nvp_request = array(
    'METHOD' => 'SetExpressCheckout',
    'RETURNURL' => Url::fromRoute('cart/echeckout/selected', [], ['absolute' => TRUE])->toString(),
    'CANCELURL' => Url::fromRoute('uc_cart.checkout_review', [], ['absolute' => TRUE])->toString(),
    'AMT' => uc_currency_format($order->getTotal(), FALSE, FALSE, '.'),
    'CURRENCYCODE' => $order->getCurrency(),
    'PAYMENTACTION' => $paypal_config->get('uc_pg_paypal_wpp_cc_txn_type') == 'authorize' ? 'Authorization' : 'Sale',
    'DESC' => substr($desc, 0, 127),
    'INVNUM' => $order->id() . '-' . REQUEST_TIME,
    'REQCONFIRMSHIPPING' => $paypal_config->get('ec_rqconfirmed_addr'),
    'ADDROVERRIDE' => 1,
    'BUTTONSOURCE' => 'Ubercart_ShoppingCart_EC_US',
    'NOTIFYURL' => Url::fromRoute('uc_paypal.ipn', [], ['absolute' => TRUE])->toString(),
    'SHIPTONAME' => substr($order->delivery_first_name . ' ' . $order->delivery_last_name, 0, 32),
    'SHIPTOSTREET' => substr($order->delivery_street1, 0, 100),
    'SHIPTOSTREET2' => substr($order->delivery_street2, 0, 100),
    'SHIPTOCITY' => substr($order->delivery_city, 0, 40),
    'SHIPTOSTATE' => $order->delivery_zone,
    'SHIPTOCOUNTRYCODE' => $order->delivery_country,
    'SHIPTOZIP' => substr($order->delivery_postal_code, 0, 20),
    'PHONENUM' => substr($order->delivery_phone, 0, 20),
    'LANDINGPAGE' => $paypal_config->get('ec_landingpage_style'),
  );

  if (!$order->isShippable()) {
    $nvp_request['NOSHIPPING'] = 1;
    unset($nvp_request['ADDROVERRIDE']);
  }

  $nvp_response = uc_paypal_api_request($nvp_request, $paypal_config->get('wpp_server'));

  if ($nvp_response['ACK'] != 'Success') {
    drupal_set_message(t('Error message from PayPal:<br />@message', ['@message' => $nvp_response['L_LONGMESSAGE0']]), 'error');
    // @todo: when this goes into a controller or form, use $this ...
    // $this->redirect('uc_cart.checkout');
    return new RedirectResponse(Url::fromRoute('uc_cart.checkout')->toString());
  }

  $session->set('TOKEN', $nvp_response['TOKEN']);

  if (strpos($paypal_config->get('wpp_server'), 'sandbox') > 0) {
    $sandbox = 'sandbox.';
  }

  header('Location: https://www.' . $sandbox . 'paypal.com/cgi-bin/webscr?cmd=_express-checkout&token=' . $session->get('TOKEN'));
  exit();
}

/**
 * Additional submit handler for uc_cart_checkout_review_form().
 *
 * @see uc_cart_checkout_review_form()
 */
function uc_paypal_ec_submit_form_submit($form, &$form_state) {
  $paypal_config = \Drupal::config('uc_paypal.settings');
  $session = \Drupal::service('session');
  $order = Order::load($session->get('cart_order'));

  list($desc, $subtotal) = _uc_paypal_product_details($order->products);

  $shipping = 0;
  if (is_array($order->line_items)) {
    foreach ($order->line_items as $item) {
      if ($item['type'] == 'shipping') {
        $shipping += $item['amount'];
      }
    }
  }

  $tax = 0;
  if (\Drupal::moduleHandler()->moduleExists('uc_tax')) {
    foreach (uc_tax_calculate($order) as $tax_item) {
      $tax += $tax_item->amount;
    }
  }

  $subtotal = $order->getTotal() - $tax - $shipping;

  $nvp_request = array(
    'METHOD' => 'DoExpressCheckoutPayment',
    'TOKEN' => $session->get('TOKEN'),
    'PAYMENTACTION' => $paypal_config->get('uc_pg_paypal_wpp_cc_txn_type') == 'authorize' ? 'Authorization' : 'Sale',
    'PAYERID' => $session->get('PAYERID'),
    'AMT' => uc_currency_format($order->getTotal(), FALSE, FALSE, '.'),
    'DESC' => substr($desc, 0, 127),
    'INVNUM' => $order->id() . '-' . REQUEST_TIME,
    'BUTTONSOURCE' => 'Ubercart_ShoppingCart_EC_US',
    'NOTIFYURL' => Url::fromRoute('uc_paypal.ipn', [], ['absolute' => TRUE])->toString(),
    'ITEMAMT' => uc_currency_format($subtotal, FALSE, FALSE, '.'),
    'SHIPPINGAMT' => uc_currency_format($shipping, FALSE, FALSE, '.'),
    'TAXAMT' => uc_currency_format($tax, FALSE, FALSE, '.'),
    'CURRENCYCODE' => $order->getCurrency(),
  );

  $nvp_response = uc_paypal_api_request($nvp_request, $paypal_config->get('wpp_server'));

  $session->remove('TOKEN');
  $session->remove('PAYERID');
  $complete = array();
  if ($session->has('uc_checkout')) {
    $complete = $session->get('uc_checkout');
  }
  $complete[$session->get('cart_order')]['do_complete'] = TRUE;
  $session->set('uc_checkout', $complete);

  $form_state->setRedirect('uc_cart.checkout_complete');
}

/**
 * Sends a request to PayPal and returns a response array.
 */
function uc_paypal_api_request($params, $server) {
  $paypal_config = \Drupal::config('uc_paypal.settings');
  // We use $params += to add API credentials so that if a key already exists
  // it will not be overridden.
  $params += array(
    'USER' => $paypal_config->get('api_username'),
    'PWD' => $paypal_config->get('api_password'),
    'VERSION' => '3.0',
    'SIGNATURE' => $paypal_config->get('api_signature'),
  );

// @todo: figure out the right way to send the data.
//  $response = \Drupal::httpClient()
//    ->setSslVerification(TRUE, TRUE, 2)
//    ->setConfig(array('curl.options' => array(CURLOPT_FOLLOWLOCATION => FALSE)))
//    ->post($server, NULL, $params)
//    ->send();
  $response = \Drupal::httpClient()
    ->post($server, array(
      'form_params' => $params,
      'verify' => TRUE,
    ));

// @todo: Which one? isError() was D7, 200 doesn't allow for redirects etc
//  if ($response->isError()) {
  if ($response->getStatusCode() != 200) {
    \Drupal::logger('uc_paypal')->error('@error', ['@error' => $response->getReasonPhrase()]);
  }

  return _uc_paypal_nvp_to_array($response->getBody());
}




/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/




/**
 * Returns the description and subtotal of the products on an order.
 */
function _uc_paypal_product_details($items) {
  $desc = '';
  $subtotal = 0;

  if (!empty($items)) {
    foreach ($items as $item) {
      if (!empty($desc)) {
        $desc .= ' / ';
      }
      $desc .= $item->qty->value . 'x ' . $item->title;
      $subtotal += $item->qty->value * $item->price->value;
    }
  }

  return array($desc, $subtotal);
}

/**
 * Turns PayPal's NVP response to an API call into an associative array.
 */
function _uc_paypal_nvp_to_array($nvpstr) {
  foreach (explode('&', $nvpstr) as $nvp) {
    list($key, $value) = explode('=', $nvp);
    $nvp_array[urldecode($key)] = urldecode($value);
  }

  return $nvp_array;
}
