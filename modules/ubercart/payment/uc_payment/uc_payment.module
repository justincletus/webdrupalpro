<?php

/**
 * @file
 * Defines the payment API that lets payment modules interact with Ubercart.
 *
 * The payment system in Ubercart relies on hooks to let the main program know
 * what payment modules are installed and what their current settings are. The
 * customer can choose a payment type at checkout, and the proper information
 * will be collected to complete the purchase.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Component\Utility\Xss;
use Drupal\uc_order\Entity\Order;
use Drupal\uc_order\OrderInterface;
use Drupal\uc_payment\Entity\PaymentMethod;
use Drupal\uc_payment\Form\OffsitePaymentMethodForm;
use Drupal\uc_payment\OffsitePaymentMethodPluginInterface;
use Drupal\user\Entity\User;


/**
 * Implements hook_help().
 */
function uc_payment_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.uc_payment_method.collection':
      return '<p>' . t('By default, only the "No payment required" payment method is listed here. To see additional payment methods you must <a href=":install">install additional modules</a>. The "Payment Method Pack" module that comes with Ubercart provides "Check" and "COD" payment methods. The "Credit Card" module that comes with Ubercart provides a credit card payment method, although you will need an additional module to provide a payment gateway for your credit card. For more information about payment methods and settings please read the <a href=":doc">Ubercart Documentation</a>.', [':install' => Url::fromRoute('system.modules_list', [], ['fragment' => 'edit-modules-ubercart-payment'])->toString(), ':doc' => Url::fromUri('http://www.drupal.org/documentation/modules/ubercart')->toString()]) . '</p><p>' . t('The order of methods shown below is the order those methods will appear on the checkout page. To re-order, drag the method to its desired location use the drag icon then save the configuration using the button at the bottom of the page.') . '</p>';
      break;
  }
}

/**
 * Implements hook_theme().
 */
function uc_payment_theme() {
  return array(
    'uc_payment_totals' => array(
      'variables' => array('order' => NULL),
      'template' => 'uc-payment-totals',
    ),
  );
}

/**
 * Prepares variables for the payment totals template.
 *
 * Default template: uc-payment-totals.html.twig.
 */
function template_preprocess_uc_payment_totals(&$variables) {
  $variables['line_items'] = $variables['order']->getDisplayLineItems();

  foreach ($variables['line_items'] as $key => $line) {
    $variables['line_items'][$key]['title'] = Xss::filter($line['title']);
    $variables['line_items'][$key]['amount'] = uc_currency_format($line['amount']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_view_form().
 *
 * Adds express buttons for enabled payment modules directly to the cart page.
 */
function uc_payment_form_uc_cart_view_form_alter(&$form, FormStateInterface $form_state) {
// @todo Add express payment methods
//  foreach (uc_payment_method_list() as $id => $method) {
//    if ($method['checkout'] && isset($method['express']) && $express = $method['express'](array(), $form_state)) {
//      $form['actions']['checkout'][$id] = $express;
//    }
//  }
  $definitions = \Drupal::service('plugin.manager.uc_payment.method')->getDefinitions();
  foreach ($definitions as $key => $definition) {
    if (!empty($definition['express'])) {
      $express = \Drupal::formBuilder()->getForm($definition['express']);
//      $form['actions']['checkout'][] = \Drupal::service('renderer')->renderPlain($express);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_review_form().
 *
 * If a payment method redirects off-site, add the required form to the review
 * page.
 */
function uc_payment_form_uc_cart_checkout_review_form_alter(&$form, FormStateInterface $form_state) {
  $order = $form_state->get('uc_order');
  /** @var \Drupal\uc_payment\PaymentMethodPluginInterface $plugin */
  $plugin = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order);

  if ($plugin instanceof OffsitePaymentMethodPluginInterface) {
    unset($form['actions']['submit']);
    $offsite_form = new OffsitePaymentMethodForm($plugin);
    $suffix = \Drupal::formBuilder()->getForm($offsite_form, $order);
    $form['#suffix'] = \Drupal::service('renderer')->renderPlain($suffix);
  }
}

/**
 * Implements hook_uc_order().
 */
function uc_payment_uc_order($op, $order) {
  switch ($op) {
    case 'submit':
      return \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order)->orderSubmit($order);
  }
}

/**
 * Implements hook_uc_payment_method_checkout_alter().
 */
function uc_payment_uc_payment_method_checkout_alter(array &$methods, OrderInterface $order) {
  if (isset($methods['free_order'])) {
    if ($order->getTotal() < 0.01) {
      // Unset all other payment methods if this is a free order.
      foreach (array_keys($methods) as $key) {
        if ($key != 'free_order') {
          unset($methods[$key]);
        }
      }
    }
    else {
      // Disallow this payment method if the order is not free.
      unset($methods['free_order']);
    }
  }
}

/**
 * Enters a payment for an order.
 *
 * @param $order_id
 *   The order ID to apply the payment to.
 * @param $method
 *   The payment method ID.
 * @param $amount
 *   The amount of the payment.
 * @param $uid
 *   (optional) The user ID of the person logging the payment, or 0 if the
 *   payment was processed automatically.
 * @param $data
 *   (optional) Any data that should be serialized and stored with the
 *   payment.
 * @param $comment
 *   (optional) The comment to enter in the payment log.
 * @param $received
 *   (optional) The timestamp at which the payment was received.
 *
 * @return
 *   A unique ID identifying the payment.
 */
function uc_payment_enter($order_id, $method, $amount, $uid = 0, $data = NULL, $comment = '', $received = REQUEST_TIME) {
  // Reset uc_order entity cache then load order.
  \Drupal::entityManager()->getStorage('uc_order')->resetCache([$order_id]);
  $order = Order::load($order_id);
  $account = User::load($uid);

  $method_entity = PaymentMethod::load($method);
  $method_name = $method_entity ? $method_entity->getPlugin()->cartReviewTitle() : t('Other');

  if (is_array($data)) {
    $data = serialize($data);
  }

  $log_message = t('@method payment for @amount entered.', array('@method' => $method_name, '@amount' => uc_currency_format($amount)));
  $order->logChanges(array($log_message));

  $receipt_id = db_insert('uc_payment_receipts')
    ->fields(array(
      'order_id' => $order_id,
      'method' => $method_name,
      'amount' => $amount,
      'uid' => $uid,
      'data' => $data,
      'comment' => $comment,
      'received' => $received,
    ))
    ->execute();

  // Invalidate entity cache.
  Cache::invalidateTags(['uc_order:' . $order_id]);

  // Ensure user has an account before payment is made.
  if (\Drupal::moduleHandler()->moduleExists('uc_cart')) {
    \Drupal::service('uc_cart.manager')->completeSale($order);
  }

  \Drupal::moduleHandler()->invokeAll('uc_payment_entered', array($order, $method, $amount, $account, $data, $comment));
  // rules_invoke_event('uc_payment_entered', $order, $account);

  return $receipt_id;
}

/**
 * Implements hook_uc_payment_entered().
 *
 * Automatically mark paid orders as "payment received".
 *
 * @todo Remove when Rules is available.
 */
function uc_payment_uc_payment_entered(OrderInterface $order) {
  if (uc_payment_balance($order) <= 0) {
    $state = $order->getStateId();
    if ($state == 'in_checkout' || $state == 'post_checkout') {
      $order->setStatusId('payment_received')->save();
    }
  }
}

/**
 * Implements hook_uc_order_load().
 */
function uc_payment_uc_order_load($orders) {
  foreach ($orders as $order) {
    if ($order->getPaymentMethodId()) {
      \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order)->orderLoad($order);
    }
  }
}

/**
 * Implements hook_uc_order_update().
 */
function uc_payment_uc_order_update(OrderInterface $order) {
  if ($order->getPaymentMethodId()) {
    \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order)->orderSave($order);
  }

  // Move non-shippable orders from "payment received" to "completed".
  // @todo Remove when Rules is available.
  if ($order->getStatusId() == 'payment_received' && !$order->isShippable()) {
    $order->setStatusId('completed')->save();
  }
}


/**
 * Implements hook_uc_order_can_delete().
 */
function uc_payment_uc_order_can_delete(OrderInterface $order) {
  if (uc_payment_load_payments($order->id()) !== FALSE) {
    return FALSE;
  }
}

/**
 * Implements hook_uc_order_delete().
 */
function uc_payment_uc_order_delete(OrderInterface $order) {
  db_delete('uc_payment_receipts')
    ->condition('order_id', $order->id())
    ->execute();

  // Call each payment method to delete method-specific data from the database.
  foreach (uc_payment_method_list() as $id => $method) {
    \Drupal::service('plugin.manager.uc_payment.method')->createInstance($id)->orderDelete($order);
  }
}

/**
 * Deletes a payment from the database.
 */
function uc_payment_delete($receipt_id) {
  if (!is_numeric($receipt_id)) {
    return FALSE;
  }

  $payment = uc_payment_load($receipt_id);
  $log_message = t('@method payment for @amount deleted.', array('@method' => $payment->method, '@amount' => uc_currency_format($payment->amount)));
  Order::load($payment->order_id)->logChanges(array($log_message));

  db_delete('uc_payment_receipts')
    ->condition('receipt_id', $receipt_id)
    ->execute();
}

/**
 * Returns the balance of payments on an order.
 */
function uc_payment_balance($order) {
  $total = $order->getTotal();
  $payments = uc_payment_load_payments($order->id());

  if ($payments === FALSE) {
    return $total;
  }

  foreach ($payments as $payment) {
    $total -= $payment->amount;
  }

  return $total;
}

/**
 * Loads a single payment from the database by receipt_id.
 */
function uc_payment_load($receipt_id) {
  if (!is_numeric($receipt_id)) {
    return FALSE;
  }

  $payment = db_query("SELECT * FROM {uc_payment_receipts} WHERE receipt_id = :id", array(':id' => $receipt_id))->fetchObject();

  return $payment;
}

/**
 * Loads an array of all the payments for an order.
 *
 * @param $order_id
 *   The order's id.
 *
 * @return
 *   Array of payment objects or FALSE if there are none.
 */
function uc_payment_load_payments($order_id) {
  $payments = db_query("SELECT * FROM {uc_payment_receipts} WHERE order_id = :id ORDER BY received ASC", array(':id' => $order_id))->fetchAll();

  if (count($payments) == 0) {
    $payments = FALSE;
  }

  return $payments;
}

/**
 * Returns a list of available payment methods plugins.
 *
 * @return array
 *   An array of payment method definitions, keyed by method ID.
 */
function uc_payment_method_list() {
  return \Drupal::service('plugin.manager.uc_payment.method')->getDefinitions();
}
